// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String  @id @default(cuid())
  platform        String // telegram, whatsapp, sms
  platformId      String // user ID on that platform
  services        String  @default("sales,finance")
  name            String?
  username        String?  @unique
  isSetupComplete Boolean @default(false)
  phone           String?
  isActive        Boolean @default(true)

  // Notification preferences
  morningNotificationTime   String? // "08:00" format
  eveningNotificationTime   String? // "18:00" format  
  notificationPlatform      String? // preferred platform for notifications
  enableMorningNotification Boolean @default(false)
  enableEveningNotification Boolean @default(false)
  timezone                  String? // user timezone

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  leads         Lead[]
  transactions  Transaction[]
  accounts      Account[]
  notifications Notification[]

  @@unique([platform, platformId])
  @@index([enableMorningNotification])
  @@index([enableEveningNotification])
  @@index([isActive])
  @@map("users")
}

model Lead {
  id           String    @id @default(cuid())
  userId       String
  name         String
  phone        String?
  contacted    Boolean   @default(false)
  replied      Boolean   @default(false)
  interested   Boolean   @default(false)
  status       String    @default("New") // New, Contacted, Replied, Interested, Waiting, Proposal Sent, Closed - Won, Closed - Lost
  nextStep     String?
  nextFollowup DateTime?
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, status])
  @@index([userId, nextFollowup])
  @@index([nextFollowup])
  @@index([status])
  @@index([userId, updatedAt])
  @@index([userId, interested])
  @@map("leads")
}

model Transaction {
  id               String   @id @default(cuid())
  userId           String
  date             DateTime @default(now())
  description      String
  amount           Float
  category         String // Income, Fixed Expenses, Variable Expenses, Savings, Investment, Debt Payment
  babylonPrinciple String? // Pay Self First, Control Spending, Make Money Work, etc.
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, category])
  @@index([userId, createdAt])
  @@index([category])
  @@index([createdAt])
  @@index([userId, category, createdAt])
  @@map("transactions")
}

model Account {
  id             String   @id @default(cuid())
  userId         String
  name           String
  type           String // Asset, Liability, Investment, Emergency Fund
  currentBalance Float    @default(0)
  targetAmount   Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@index([userId])
  @@index([userId, type])
  @@index([targetAmount])
  @@map("accounts")
}

model Notification {
  id       String   @id @default(cuid())
  userId   String
  type     String // morning, evening, reminder
  content  String
  sentAt   DateTime @default(now())
  platform String
  status   String   @default("sent") // sent, failed

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, sentAt])
  @@index([type])
  @@index([status])
  @@map("notifications")
}